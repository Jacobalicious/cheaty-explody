const maze_pointers = {
    "maze1": ["1,2", "6,3"],
    "maze2": ["2,4", "5,2"],
    "maze3": ["4,4", "6,4"],
    "maze4": ["1,1", "1,4"],
    "maze5": ["5,3", "4,6"],
    "maze6": ["5,1", "3,5"],
    "maze7": ["2,1", "2,6"],
    "maze8": ["4,1", "3,4"],
    "maze9": ["3,2", "1,5"]
}

const maze1 = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
    ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
    ['#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#'],
    ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
    ['#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#'],
    ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
    ['#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
    ['#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'],
    ['#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#'],
    ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#'],
    ['#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
    ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

]

const maze2 = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
    ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
    ['#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#', '#', '#'],
    ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#'],
    ['#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#'],
    ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
    ['#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#'],
    ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#'],
    ['#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.', '#'],
    ['#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
    ['#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
    ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

]

const maze3 = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
    ['#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#'], 
    ['#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'], 
    ['#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#'], 
    ['#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'], 
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

]

const maze4 = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
    ['#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#'], 
    ['#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#'], 
    ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#'], 
    ['#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#'], 
    ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#'], 
    ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#'], 
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

]

const maze5 = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
    ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'], 
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#'], 
    ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#'], 
    ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#'], 
    ['#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#'], 
    ['#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#'], 
    ['#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'], 
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

]

const maze6 = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
    ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#'], 
    ['#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#'], 
    ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#'], 
    ['#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#'],
    ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#'], 
    ['#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'], 
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

]

const maze7 = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
    ['#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#'], 
    ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#'], 
    ['#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#'], 
    ['#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#'], 
    ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'], 
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

]

const maze8 = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
    ['#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'], 
    ['#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#'], 
    ['#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'], 
    ['#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#'], 
    ['#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#'], 
    ['#', '.', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
    ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'], 
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

]

const maze9 = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
    ['#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'], 
    ['#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '#', '#', '.', '#', '.', '#'], 
    ['#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'], 
    ['#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#', '#'], 
    ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#'], 
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

]




const solveMazeWithPath = (maze) => {
    const R = maze.length;
    const C = maze[0].length;
    let start;
    for (let r = 0; r < R; r++) {
        for (let c = 0; c < C; c++) {
            if (maze[r][c] === 'S') {
                start = [r, c];
                break;
            }
        }
        if (start) break;
    }
    if (!start) return null;

    const queue = [[start[0], start[1], 0, []]];
    const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];
    const visited = Array.from({ length: R }, () => Array.from({ length: C }, () => false));

    while (queue.length !== 0) {
        const [r, c, steps, path] = queue.pop();
        visited[r][c] = true;

        if (maze[r][c] === "E") {
            return [steps, path];
        }

        for (const [dr, dc] of directions) {
            const nr = r + dr;
            const nc = c + dc;
            if (nr < 0 || nr >= R || nc < 0 || nc >= C || maze[nr][nc] === "#" || visited[nr][nc]) {
                continue;
            }

            const newPath = [...path, [dr, dc]];
            queue.unshift([nr, nc, steps + 1, newPath]);
        }
    }

    return null;
};

const constructPath = (path) => {
    const directions = {
        '0,1': 'right',
        '0,-1': 'left',
        '1,0': 'down',
        '-1,0': 'up'
    };

    let result = [];
    let prevDir = null;
    let count = 0;

    for (const dir of path) {
        const currDir = directions[dir.join(',')];
        if (currDir !== prevDir) {
            if (count > 0) {
                result.push(`${prevDir} * ${Math.floor(count / 2)}`);
            }
            count = 1;
            prevDir = currDir;
        } else {
            count += 1;
        }
    }

    if (count > 0) {
        result.push(`${prevDir} * ${Math.floor(count / 2)}`);
    }

    return result;
};

const run = () => {
    const circlePointerResponse = document.getElementById('greenCircle');
    const findStartResponse = document.getElementById('start');
    const findEndResponse = document.getElementById('end');
    const pointer = circlePointerResponse.value.trim();
    const ask_start = findStartResponse.value.trim();
    const ask_end = findEndResponse.value.trim();
    mazePicker(pointer,ask_start,ask_end);
}

const mazePicker = (pointer,ask_start,ask_end) => {
    const error = document.getElementById('moves');
    for (const [maze, coords] of Object.entries(maze_pointers)) {
    if (coords.includes(pointer)) {
        console.log(`The coordinate ${pointer} is in ${maze}`);
        mazeRunner(pointer,ask_start,ask_end,maze);
        break;
    }
    }
    if (!Object.values(maze_pointers).some(coords => coords.includes(pointer))) {
    console.log(`The coordinate ${pointer} is not found in any maze`);
    error.innerText = `The coordinate ${pointer} is not found in any maze`;
    }
}

const mazeRunner = (pointer,ask_start,ask_end,maze) => {
    const amountOfMoves = document.getElementById('moves');

    const [start_row, start_col] = ask_start.split(',').map(Number);
    const [end_row, end_col] = ask_end.split(',').map(Number);

    maze1[(start_col * 2) - 1][(start_row * 2) - 1] = 'S';
    maze1[(end_col * 2) - 1][(end_row * 2) - 1] = 'E';

    const [pathLen, path] = solveMazeWithPath(maze1);
    if (pathLen === null) {
    
    console.log("No valid path found.");
    amountOfMoves.innerText = `No valid path found`;
    } else {
    const pathItems = constructPath(path);

    amountOfMoves.innerText = `Length of path: ${pathLen/2}`;
    console.log("Length of path:", pathLen/2);

    const mazePath = document.getElementById('path');
    mazePath.innerText = `Length of Path: ${pathItems.join(", ")}`;
    console.log("Path Items:", pathItems.join(", "));
    }
}